@inject MediaPlayerService playerService
@inject QueuePlayerService queueService
@inject DisplayService displayService
@inject SettingService settingService

<audio id="audio-player-blazor-html5">
    <source src="" type="" />
</audio>


<Title />

<div class="player">


    <div class="separator">
        @if (File != null)
        {
            <canvas id="waveform" width="1" height="1"></canvas>
        }
    </div>



    <Progress File=File />

    <div class="controls">
        <div class="playlist-button" @onclick="ToggleChapters"></div>
        <div class="control-separator"></div>
        <div class="prev-chapter-button" @onclick="PrevChapter"></div>
        <div class="rewind-button" @onclick="Prev30s"><span class="text-time">@settingService.RewindTime</span></div>
        <div class="@PlayPauseState" @onclick="OnPlayPause"></div>
        <div class="forward-button" @onclick="Next30s"><span class="text-time">@settingService.ForwardTime</span></div>
        <div class="next-chapter-button" @onclick="NextChapter"></div>
        <div class="control-separator"></div>
        <div class="volume-control @VolumeClass">
            <VolumeSlider />
        </div>
    </div>

    @if (DisplayChapters)
    {
        <Chapters File="@File" />
    }


</div>

@code {

    AudioMetadata? File;
    string PlayPauseState = "play-button";
    string VolumeClass = "volume-button";

    uint CurrentTime { get; set; } = 0;

    bool DisplayChapters = false;

    bool DisplayWave = true;
    async Task OnPlayPause()
    {
        if (PlayPauseState == "play-button")
        {
            // start to play
            if (File != null)
            {
                await playerService.Play(File);
                PlayPauseState = "pause-button";
            }

        }
        else
        {
            // pause playing
            await playerService.Pause();
            PlayPauseState = "play-button";

        }


    }

    void ToggleChapters()
    {
        DisplayChapters = !DisplayChapters;
    }

    override protected async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await playerService.Init();
            playerService.OnTimestampUpdated += () =>
            {
                StateHasChanged();
            };
            playerService.OnVolumeChange += OnVolumeChange;

            settingService.WaveFrameSettingChanged += async (value) =>
            {
                DisplayWave = value;
                await playerService.SetWaveRendering(value);

            };
            settingService.RewindTimeSettingChanged += (t) => { StateHasChanged(); };
            settingService.ForwardTimeSettingChanged += (t) => { StateHasChanged(); };

            await playerService.SetWaveRendering(settingService.WaveFrame);

        }
    }

    private void OnVolumeChange(float volume)
    {
        if (volume > .5)
            VolumeClass = "volume-loud-button";
        else if (volume > .25)
            VolumeClass = "volume-low-button";
        else
            VolumeClass = "volume-button";

    }


    override protected void OnInitialized()
    {
        queueService.OnQueueChanged +=  () => QueueChanged();
        QueueChanged();
    }

    private async void QueueChanged()
    {
        File = playerService.getCurrentFileInQueue();
        StateHasChanged();
        await playerService.Load();
    }


    private async Task Next30s()
    {
        await playerService.Next30s(settingService.ForwardTime);
    }

    private async Task Prev30s()
    {

        await playerService.Prev30s(settingService.RewindTime);
    }

    private async Task NextChapter()
    {
        var nextChapter = File?.Chapters.OrderBy(c => c.StartTime).FirstOrDefault(c => playerService.CurrentTimeAsMilliseconds <
        c.StartTime);
        if (nextChapter != null)
            await playerService.GoToTimestamp(nextChapter.StartTime);
    }

    private async Task PrevChapter()
    {

        var prevChapter = File?.Chapters.OrderByDescending(c => c.StartTime).FirstOrDefault(c =>
        playerService.CurrentTimeAsMilliseconds > c.EndTime);
        if (prevChapter != null)
            await playerService.GoToTimestamp(prevChapter.StartTime);
    }



}